#!/usr/bin/env python
# -*-Mode: python;-*-

#****************************************************************************
# $HeadURL$
# $Id: 81e0d336c5d9fdac182401ef5e8a02196c30c160 $
#
# Nathan Tallent
#****************************************************************************

import os
import sys
import argparse

#import re
import collections

import pandas
import numpy
import math

#****************************************************************************
#
#****************************************************************************

def main():
    #-------------------------------------------------------
    # 
    #-------------------------------------------------------

    parser = argparse.ArgumentParser(description='Select AMD IBS data.')
    parser.add_argument(dest='in_path', #metavar='in-path',
                        help="IBS csv file")
    # nargs='+', type=argparse.FileType('r'),
    
    parser.add_argument('-o', '--output', dest='out_path', metavar='out_path',
                        help="Output CSV file")
    args = parser.parse_args()

    #-------------------------------------------------------
    # 
    #-------------------------------------------------------
    
    processPerfData(args.in_path, args.out_path)


#****************************************************************************
#
#****************************************************************************

#-------------------------------------------------------
# Columns
#-------------------------------------------------------

#-------------------------
# Native columns
#-------------------------

# TSC, CPU_Number, TID, PID, Kern_mode, IbsOpRip, IbsOpMaxCnt[26:0], 
# IbsCompToRetCtr, IbsTagToRetCtr, IbsOpReturn, 
# IbsOpBrnTaken, IbsOpBrnMisp, IbsOpBrnRet, 
# IbsRipInvalid, IbsOpBrnFuse, IbsOpMicrocode, DataSrc, RmtNode, CacheHitSt, IbsLdOp, IbsStOp, IbsDcL1tlbMiss, IbsDcL2TlbMiss, IbsDcL1TlbHit2M, IbsDcL1TlbHit1G, IbsDcL2tlbHit2M, IbsDcMiss, IbsDcMissAcc, IbsDcWcMemAcc, IbsDcUcMemAcc, IbsDcLockedOp, DcMissNoMabAlloc, IbsDcLinAddrValid, IbsDcPhyAddrValid, IbsDcL2tlbHit1G, IbsL2Miss, IbsSwPf, IbsOpMemWidth, IbsOpDcMissOpenMemReqs, IbsDcMissLat, IbstlbRefillLat, 
# IbsDcLinAd, IbsDcPhysAd, IbsBrnTarget

#-------------------------
# Source-code columns
#-------------------------

# Source_Line, Binary_Offset, Opcode, Instruction


#-------------------------------------------------------
# Used columns
#-------------------------------------------------------

col_tsc = 'TSC'

col_cpu = 'CPU_Number'

col_pid = 'PID'

col_tid = 'TID'

col_kern = 'Kern_mode'

col_ip = 'IbsOpRip'

col_ld = 'IbsLdOp'  # load operations
col_st = 'IbsStOp' # store operations

col_addr_vma_valid = 'IbsDcLinAddrValid' # IbsDcPhyAddrValid
col_addr_vma = 'IbsDcLinAd'

colL_addr = [ col_addr_vma, 'IbsDcPhysAd' ]

col_bin_offset = 'Binary_Offset'

colL_annot = [
    'Source_Line',
    col_bin_offset,
]


# initial 'keep' list
colL_keep0 = [
    col_pid,
    col_tid,
    col_kern,
    col_ld,
    
    col_ip,

    #*colL_addr,
    col_addr_vma_valid,
    col_addr_vma,

    col_cpu,
    col_tsc,
]


# final 'keep' list
colL_keep = [
    #col_ip,
    col_bin_offset,
    col_addr_vma,
    col_cpu,
    col_tsc,
]


#-------------------------------------------------------

# columns in order 
colH_dtype = {
    col_tsc : int,
    col_cpu : int,
    col_pid : int,
    col_tid : int,
    col_kern : int,

    'IbsOpMaxCnt[26:0]' : int,
    'IbsCompToRetCtr' : int,
    'IbsTagToRetCtr' : int,
    'IbsOpReturn' : int,
    'IbsOpBrnTaken' : int,
    'IbsOpBrnMisp' : int,
    'IbsOpBrnRet' : int,
    'IbsRipInvalid' : int,
    'IbsOpBrnFuse' : int,
    'IbsOpMicrocode' : int,
    
    col_ld : int,
    col_st : int,

    'IbsDcL1tlbMiss' : int,
    'IbsDcL2TlbMiss' : int,
    'IbsDcL1TlbHit2M' : int,
    'IbsDcL1TlbHit1G' : int,
    'IbsDcL2tlbHit2M' : int,
    'IbsDcMiss' : int,
    'IbsDcMissAcc' : int,
    'IbsDcWcMemAcc' : int,
    'IbsDcUcMemAcc' : int,
    'IbsDcLockedOp' : int,
    'DcMissNoMabAlloc' : int,

    col_addr_vma_valid  : int,

    'IbsDcPhyAddrValid' : int,
    'IbsDcL2tlbHit1G' : int,
    'IbsL2Miss' : int,
    'IbsSwPf' : int,
    'IbsOpMemWidth' : int,
    'IbsOpDcMissOpenMemReqs' : int,
    'IbsDcMissLat' : int,
    'IbstlbRefillLat' : int,
}


#-------------------------------------------------------


def processPerfData(in_path, out_path):
    #-------------------------------------------------------
    # Read, winnow and reorder columns
    #-------------------------------------------------------

    df_col = pandas.read_csv(in_path, nrows=0).columns
    colH_dtype.update({col : str for col in df_col if col not in colH_dtype })
    #print("{}\n".format(colH_dtype))
    
    if set(colL_annot).issubset(df_col):
        colL_keep0.extend(colL_annot)
        colL_keep.extend(colL_annot)
        #print("  keep init: {}\n  keep fini: {}\n".format(colL_keep0, colL_keep))


    # TODO: use read_csv's chunksize=x to read incrementally

    df = pandas.read_csv(in_path, index_col=False,
                         usecols=colL_keep0,
                         dtype=colH_dtype,
                         #na_values='-',
                         low_memory=False) 
              

    n_smpl_init = df.shape[0] # len(df.index)
    
    #df = df[ colL_keep0 ]  # deprecated with 'usecols'
    #print(df)


    #-------------------------------------------------------
    # Prune unneeded samples
    #-------------------------------------------------------

    #-------------------------
    # Keep only user-level samples (drop kernel samples)
    #-------------------------
    
    df = df[ df[col_kern] < 1 ]
    #selectRows = df[df[col_kern] >= 1].index
    #df.drop(selectRows, inplace = True)

    n_smpl_user = df.shape[0]

    #-------------------------
    # Keep only load instructions
    #-------------------------

    df = df[ df[col_ld] >= 1 ]

    n_smpl_ld = df.shape[0]

    #-------------------------
    # Keep instructions with valid data VMA
    #-------------------------

    df = df[ df[col_addr_vma_valid] >= 1 ]
    #df = df[ df[col_addr_vma] != '-' ]

    n_smpl_vma = df.shape[0]
    
    #-------------------------
    # Keep only first process     *** not necessary now? ***
    #-------------------------

    pid_str = ''
    my_pid = df[col_pid].iloc[0]

    if (True):
        #n_pid = len(pandas.unique(df[col_pid]))
        #print("unique pid: {}".format(n_tid))

        cnt_pid = df[col_pid].value_counts() #df.groupby(col_pid).count()
        pid_str += "pid-count, lds-vma: {}".format(cnt_pid.to_string())
    
    df = df[ df[col_pid] == my_pid ]

    if (True):
        n_tid = len(pandas.unique(df[col_tid]))
        pid_str += "\nunique tid: {}".format(n_tid)

    n_smpl_fini = df.shape[0]

    #-------------------------------------------------------
    # Final columns
    #-------------------------------------------------------

    df = df[colL_keep]
    
    df['SampleID'] = 0 # Add column as placeholder
    
    df[col_tsc] = df[col_tsc].apply(lambda x: x/1000000000)
    
    #-------------------------------------------------------
    # 
    #-------------------------------------------------------

    MSG.msg_b("Samples: total: {}, user: {}, loads: {}, vma: {}, pid({}): {}".format(n_smpl_init, n_smpl_user, n_smpl_ld, n_smpl_vma, my_pid, n_smpl_fini))
    if (pid_str):
        MSG.msg(pid_str)
    
    #MSG.warn(out_path)

    os = out_path if (out_path) else sys.stdout
    df.to_csv(os, index=False, sep=' ')



#****************************************************************************
# 
#****************************************************************************

class MSG:
    # https://www.geeksforgeeks.org/print-colors-python-terminal/
    clr_nil  = ''
    clr_bold  = '\033[01m'
    clr_red   = '\033[31m'
    clr_purpl = '\033[35m'
    clr_reset = '\033[0m'

    @staticmethod
    def msg(str):
        MSG.do(MSG.clr_nil, '', str)

    @staticmethod
    def msg_b(str):
        MSG.do(MSG.clr_bold, '', str)
        
    @staticmethod
    def warn(str):
        MSG.do(MSG.clr_bold + MSG.clr_purpl, 'Warning', str)

    @staticmethod
    def err(str, code=1):
        MSG.do(MSG.clr_bold + MSG.clr_red, 'Error', str)
        exit(code)

    @staticmethod
    def do(color, info, str):
        if (info):
            try:
                name = sys._getframe(2).f_code.co_name
            except (IndexError, TypeError, AttributeError): # something went wrong
                name = "<unknown>"

            print("{}{} [{}]: {}{}".format(color, info, name, str, MSG.clr_reset))
        else:
            print("{}{}{}".format(color, str, MSG.clr_reset))



#****************************************************************************

if (__name__ == "__main__"):
    sys.exit(main())
