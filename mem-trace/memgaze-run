#!/bin/bash
# -*- mode: sh -*-

#*BeginPNNLCopyright*********************************************************
#
# $HeadURL$
# $Id: 0cae9f95d9ed0841bbf77c91eef5f3d4c9a73f2e $
#
#***********************************************************EndPNNLCopyright*

# set -x


hostName=`hostname -s`
scriptPath0="${BASH_SOURCE[0]}" # works when script is sourced (unlike $0)
scriptPath=$(readlink -f "${scriptPath0}")
scriptCmd=${scriptPath##*/} # cf. $(basename ...)
scriptDir=${scriptPath%/*}  # cf. $(dirname ...)

use_stdin=0
if test ! -t 0; then
  use_stdin=1
  stdin_file_path=$PWD
  stdin_file="$stdin_file_path/stdin_file"
  if [ -f "$stdin_file" ] ; then
    rm "$stdin_file"
  fi
  touch $stdin_file 
  echo "Redirecting STDIN to new file $stdin_file & using it as argument for application"
  while IFS= read -r line; do
    printf '%s\n' "$line" >> $stdin_file 
  done
fi

#****************************************************************************

MG_XLIB_ROOT="${MG_XLIB_ROOT:-${scriptDir}/../../xlib/lib}"
MG_PERF_ROOT="${MG_PERF_ROOT:-${scriptDir}/../../xlib/perf}"

#-----------------------------------------------------------

#perf="${MG_PERF_ROOT}/linux-5.5.9/tools/perf/perf"
perf="${MG_PERF_ROOT}/linux-5.18.14/tools/perf/perf"

#-----------------------------------------------------------

DYNINST_ROOT="${MG_XLIB_ROOT}/dyninst-12.1.0"
DYNINST_LIB="${DYNINST_ROOT}/lib"
export DYNINSTAPI_RT_LIB="${DYNINST_LIB}/libdyninstAPI_RT.so"
export LD_LIBRARY_PATH="${DYNINST_LIB}"

#echo ${perf}

#****************************************************************************

zero=0
opt_period=0
opt_method='pt-load'
opt_buffer=8192

#****************************************************************************
# Parse arguments
#****************************************************************************

die()
{
    cat <<EOF 1>&2
${scriptCmd}: $*
Use '${scriptCmd} -h' for usage.
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage: ${scriptCmd} [options] [--] <app> [app-args]

Trace memory behavior of application <app> (normally the result of
instrumentation). Generates output in <path>.

Options (defaults in [])
  -h / --help          help

  -o / --output <path> output directory [<app>-trace-b<buffer>-p<period>]

  -e / --event <e>     collection type for <pt-load> <pt-load-store> <pt-time> <ldlat> [pt-load]
  -b / --buffer <sz>   buffers size in bytes [8192]
  -p / --period <p>    period for sampling (0 for full trace) [0]
EOF
    exit 0
}

#-----------------------------------------------------------
# optional arguments
#-----------------------------------------------------------

while [[ $# -gt 0 ]] ; do

    arg="$1"
    shift # past argument

    case "${arg}" in
        -h | --help )
            usage
            ;;

        -e | --event )
            opt_method="$1"
            shift # past value
            ;;

        -b | --buffer-size )
            opt_buffer="$1"
            shift # past value
            ;;

        -p | --period)
            opt_period="$1"
            shift
            ;;

        -o | --output)
            opt_outDir="$1"
            shift
            ;;


        -- ) # "$@" now contains "<app> <app-args>"
            break
            ;;

        * ) # we have consumed one token of "<app> <app-args>", reset "$@"
            set -- "$arg" "$@"
            break
            ;;
    esac
done

#-----------------------------------------------------------
# required args
#-----------------------------------------------------------

if [[ -z $1 ]] ; then
    die "no command to monitor"
fi

#****************************************************************************
# 
#****************************************************************************

app=$@
args=''
args_arr=$@

IFS=' '
read -a strarr <<< "$app"
app_path=${strarr[0]}
args=${strarr[1]}

IFS='/'
read -a strarr <<< "$app_path"
app=${strarr[-1]}
IFS=''


if [[ -z ${opt_outDir} ]] ; then
  opt_outDir="${app}-trace-b${opt_buffer}-p${opt_period}"
fi

mkdir -p ${opt_outDir}


#-----------------------------------------------------------
# launch
#-----------------------------------------------------------

out_fnm="${opt_outDir}/${opt_outDir}.perf"

printf "${scriptCmd}: collecting data for $app with ${args_arr[@]:1}\n"



if [[ ${opt_method} =~ pt-* ]] ; then

    # mmap for perf's data:  -m
    # PT ring buffer size:   'aux-sample-size' in event
    # PT records ip for ptw: 'fup_on_ptw' in event
    # call graph:            -g + 'call-graph=lbr' in event
    # retired_loads:         umask=0x81,event=0xd0

    event_ptw="intel_pt/ptw=1,branch=0,period=1,fup_on_ptw=1/u"
    event_smpl=""
    
    opt_callpath="-g"
    opt_callpath_lbr=",call-graph=lbr"

    case "${opt_method}" in
        pt-load )
            if [[ ${hostName} = 'nuke' ]] ; then
		            event_smpl="cpu/umask=0x81,event=0xd0,period=${opt_period},aux-sample-size=${opt_buffer}${opt_callpath_lbr}/u"
	          else
            	  # doesnt work - mem_inst_retired.all_loads
                event_smpl_core="cpu_core/umask=0x81,event=0xd0,period=${opt_period},aux-sample-size=${opt_buffer}${opt_callpath_lbr}/u"
                event_smpl_atom="cpu_atom/umask=0x81,event=0xd0,period=${opt_period},aux-sample-size=${opt_buffer}${opt_callpath_lbr}/u"
	          fi
            ;;

        pt-load-store )
            if [[ ${hostName} = 'nuke' ]] ; then
		            event_smpl="cpu/umask=0x83,event=0xd0,period=${opt_period},aux-sample-size=${opt_buffer}${opt_callpath_lbr}/u"
	          else
            	  # doesnt work - mem_inst_retired.any      
                event_smpl_core="cpu_core/umask=0x83,event=0xd0,period=${opt_period},aux-sample-size=${opt_buffer}${opt_callpath_lbr}/u"
                event_smpl_atom="cpu_atom/umask=0x83,event=0xd0,period=${opt_period},aux-sample-size=${opt_buffer}${opt_callpath_lbr}/u"
	          fi
            ;;


        pt-time )
            event_smpl="ref-cycles/period=${opt_period},aux-sample-size=${opt_buffer}${opt_callpath_lbr}/u"
            ;;

        * )
            die "invalid trace method '${opt_method}'"
            ;;
    esac
    if (( ${opt_period} == ${zero} )) ; then
      if [ $use_stdin -eq 0 ]; then
        ${perf} record -o "${out_fnm}" -m 4M,4M \
                -e ${event_ptw} -- "$@" &
	      app_pid=$!
      else
        ${perf} record -o "${out_fnm}" -m 4M,4M  -e ${event_ptw} -- "$@" < $stdin_file &
	      app_pid=$!
      fi
    else
        if [[ ${hostName} = 'nuke' ]] ; then
          if [ $use_stdin -eq 0 ]; then
            ${perf} record -o "${out_fnm}" -m 2M,2M \
                -e ${event_ptw} -e "${event_smpl}" ${opt_callpath} -- "$@" &
	          app_pid=$!
          else
            ${perf} record -o "${out_fnm}" -m 2M,2M  -e ${event_ptw} -e "${event_smpl}" ${opt_callpath} -- "$@" < $stdin_file &
	          app_pid=$!
          fi
        else #bignuke - use core and atom events
          if [ $use_stdin -eq 0 ]; then
            ${perf} record -o "${out_fnm}" -m 2M,2M \
                -e ${event_ptw} -e "${event_smpl_core}" -e "${event_smpl_atom}" ${opt_callpath} -- "$@" & 
	          app_pid=$!
          else
            ${perf} record -o "${out_fnm}" -m 2M,2M \
                -e ${event_ptw} -e "${event_smpl_core}" -e "${event_smpl_atom}" ${opt_callpath} -- "$@" < $stdin_file & 
	          app_pid=$!
          fi
        fi
    fi

elif [[ ${opt_method} = 'ldlat' ]] ; then
    event_ldlat="cpu/mem-loads,ldlat=1,period=${opt_period}/upp"
    if [[ ${hostName} = 'nuke' ]] ; then
        event_ldlat="cpu/umask=0x01,event=0xcd,ldlat=3,period=${opt_period}/upp"
    fi
    if [ $use_stdin -eq 0 ]; then
      ${perf} record -o "${out_fnm}" -W -d \
            -e ${event_ldlat} -- "$@" &
           #-e cpu/mem-loads,ldlat=1,period=${opt_period}/upp -- "$@"
      app_pid=$!
    else
      ${perf} record -o "${out_fnm}" -W -d -e ${event_ldlat} -- "$@" < $stdin_file &
      app_pid=$!
    fi
fi


sleep 1
correct_app_pid="$(ps --no-headers -o pid= --ppid $app_pid)"
while [[ $correct_app_pid == ' '* ]]; do
       correct_app_pid="${correct_app_pid## }"
done
while [[ $correct_app_pid == *' ' ]]; do
       correct_app_pid="${correct_app_pid%% }"
done
#correct_app_pid=`echo ${correct_app_pid} | cut -d ' ' -f 2`
correct_app_pid="${correct_app_pid## }"
stack_map_line=`grep -i stack /proc/$correct_app_pid/maps`
stack_addr="${stack_map_line%%-*}"
heap_map_line=`grep -i heap /proc/$correct_app_pid/maps`
heap_addr="${heap_map_line%%-*}"

wait $app_pid 
sleep 1

#-----------------------------------------------------------
# output directory
#-----------------------------------------------------------

cat <<EOF > ${opt_outDir}/memgaze.config
-p ${opt_period}
-m ${opt_method}
-b ${app_path}
-l ${app_path}.binanlys
-h ${app_path}.hpcstruct
-data ${opt_outDir}.perf
-t ${opt_outDir}/${app}.trace
-c ${opt_outDir}/${app}.callpath
-size ${opt_buffer}
-stack_start ${stack_addr}
-heap_start ${heap_addr}
EOF

