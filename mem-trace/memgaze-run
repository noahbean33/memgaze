#!/bin/bash
# -*- mode: sh -*-

#*BeginPNNLCopyright*********************************************************
#
# $HeadURL$
# $Id: 0cae9f95d9ed0841bbf77c91eef5f3d4c9a73f2e $
#
#***********************************************************EndPNNLCopyright*

# set -x

scriptPath0="${BASH_SOURCE[0]}" # works when script is sourced (unlike $0)
scriptPath=$(readlink -f "${scriptPath0}")
scriptCmd=${scriptPath##*/} # cf. $(basename ...)
scriptDir=${scriptPath%/*}  # cf. $(dirname ...)

perf_path="${scriptDir}/../xlib/perf/linux-5.5.9/tools/perf/perf"
DYNINST_ROOT="${scriptDir}/../xlib/lib/dyninst-12.0.1"
DYNINST_LIB="${DYNINST_ROOT}/lib"
export DYNINSTAPI_RT_LIB=${DYNINST_LIB}/libdyninstAPI_RT.so

echo $DYNINSTAPI_RT_LIB
echo $perf_path

#****************************************************************************

zero=0
opt_period=0
opt_method=1
opt_buffer=8192

#****************************************************************************
# Parse arguments
#****************************************************************************

die()
{
    cat <<EOF 1>&2
${scriptCmd}: $*
Use '${scriptCmd} -h' for usage.
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage: ${scriptCmd} [options] [--] <app> [app-args]

Options:
  -h / --help   => print help
  -e / --event  => collection type for <pt-load> <pt-time> <ldlat> (def=pt-load)
  -b / --buffer => buffers size in bytes (def=8192)
  -p / --period => period for sampling ( 0 for full trace) (def=0)
  -o / --output => output folder name (def=<app>-trace-b<buffer>-p<period>
EOF
    exit 0
}

#-----------------------------------------------------------
# optional arguments
#-----------------------------------------------------------

while [[ $# -gt 0 ]] ; do

    arg="$1"
    shift # past argument

    case "${arg}" in
        -h | --help )
            usage
            ;;

        -e | --event )
            opt_method="$1"
            shift # past value
            ;;

        -b | --buffer-size )
            opt_buffer="$1"
            shift # past value
            ;;

        -p | --period)
            opt_period="$1"
            shift
            ;;

        -o | --output)
            opt_output="$1"
            shift
            ;;


	-- )
            break
            ;;

        * ) # beginning of <application> command line
            set -- "$arg" "$@"
            break
            ;;
    esac
done

#-----------------------------------------------------------
# required args
#-----------------------------------------------------------

if [[ -z $1 ]] ; then
    die "no command to monitor"
fi

#****************************************************************************
# 
#****************************************************************************

app=$@
IFS=' '
read -a strarr <<< "$app"
app_path=${strarr[0]}
IFS='/'
read -a strarr <<< "$app_path"
app=${strarr[-1]}
IFS=''


if [[ -z ${opt_output} ]] ; then
  opt_output="${app}-trace-b${opt_buffer}-p${opt_period}"
fi

mkdir ${opt_output}

echo "collecting data for $bin with $args"
if [ ${opt_period} -ne ${zero} ] ; then
  if [[ ${opt_method} = 'pt-load' ]] ; then

    ${perf_path} record -m 2M,2M -e intel_pt/ptw=1,branch=0,period=1,fup_on_ptw=1/u -g -e ref-cycles/period=${opt_period},aux-sample-size=${opt_buffer},call-graph=lbr/u -o ${opt_output}/${opt_output}.data -- "$@"

  elif [[ ${opt_method} = 'pt-time' ]] ; then
      
      ${perf_path} record -m 2M,2M -e intel_pt/ptw=1,branch=0,period=1,fup_on_ptw=1/u -g -e cpu/umask=0x81,event=0xd0,period=${opt_period},aux-sample-size=${opt_buffer},call-graph=lbr/u -o ${opt_output}/${opt_output}.perf -- "$@"
      
  elif [[ ${opt_method} = 'ldlat' ]] ; then
      
      ${perf_path} record -W -d -e cpu/mem-loads,ldlat=1,period=${opt_period}/upp -o ${opt_output}/${opt_output}.perf -- "$@"
      
  fi
fi 

if [ ${opt_period} -eq ${zero} ] ; then
   ${perf_path} record -m 4M,4M -e intel_pt/ptw=1,branch=0,period=1,fup_on_ptw=1/u -o ${opt_output}/${opt_output}.perf -- "$@"
fi
cat <<EOF > ${opt_output}/memgaze.config
-p ${opt_period}
-m ${opt_method}
-b ${app_path}
-data ${opt_output}.perf
EOF

