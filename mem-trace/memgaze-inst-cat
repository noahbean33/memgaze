#!/usr/bin/python

import sys 
import subprocess
#TO run first arg will be instrumentation log
#second arg is load classigficaton file .lc

def main():
  instMap = {}

  # ----------------------------------------
  # <.binanlys.log>
  # ----------------------------------------
    
  fmap = open(sys.argv[1], "r")
  inSection = False
  
  binaryPath = sys.argv[3]
  command = "objdump -h {} | grep .dyninstInst".format(binaryPath)
  dumpOut=subprocess.Popen(['objdump', '-h', binaryPath],stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  stdout,stderr = dumpOut.communicate()
  objdump = stdout.split()
  index = objdump.index( b".dyninstInst")
  binBaseAddr = int(objdump[index+2], 16)
  print ("Bin Base {}".format(hex(binBaseAddr)))
  isFirstAddr = False
  dyninstPadding = 0

  while True:
    line = fmap.readline()
#    print line
    if not line:
      break
    if "Start Writing to a file" in line:
      inSection = True
      isFirstAddr = True
      continue
    if inSection:
      if "I Wrote to a file named" in line:
        inSection = False
#        print ">>>>>>>Exiting<<<<<"
        break
      l =  line.split()
#      print (line)
      hex_int = int(l[1], 16)
#      new_int = hex_int + 0x1000
      new_int = hex_int
      if isFirstAddr:
        print (l)
        isFirstAddr = False
        dyninstPadding =  binBaseAddr - new_int
        print ("new int: {} ".format(hex(new_int)))
      new_int = new_int + dyninstPadding
      if l[0] in instMap:
        continue
      else:
        instMap[l[0]] = hex(new_int)

#  print (instMap):

  # ----------------------------------------
  # <.binanlys>
  # ----------------------------------------

  floadclass = open(sys.argv[2],"r")
  loadClassMap = {}

  while True:
    line = floadclass.readline()
    if not line:
      break
#    print line
    l = line.split()
    if l[0] in instMap:
      inst = instMap[l[0]]
    else:
      inst = l[0]
    if len(l) == 6:
      v = (l[1],hex(int(l[2],16)),hex(int(l[3],16)),l[4],l[0],l[5])
    else: 
      v = (l[1],hex(int(l[2],16)),hex(int(l[3],16)),l[4],l[0])
#    print v
    loadClassMap[inst] = v

  #print (loadClassMap)
  fmap.close()
  floadclass.close()
  
  writeFile =  sys.argv[2] + "_Fixed"
  floadclass = open(writeFile, "w")
#  floadclass = open("deneme.txt", "w")
  for key, value in loadClassMap.items():
    if len(value) == 6:
      text = key + " " + value[0] + " " + value[1] + " " + value[2] + " " + value[3] + " " + value[4] + " " + value[5] + "\n"
    else:
      text = key + " " + value[0] + " " + value[1] + " " + value[2] + " " + value[3] + " " + value[4] + " " + "\n"
    floadclass.write(text)

if __name__ == "__main__":
  main()

