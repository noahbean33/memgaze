#!/bin/bash
set -x

scriptPath0="${BASH_SOURCE[0]}" # works when script is sourced (unlike $0)
scriptPath=$(readlink -f "${scriptPath0}")
scriptCmd=${scriptPath##*/} # cf. $(basename ...)
scriptDir=${scriptPath%/*}  # cf. $(dirname ...)

perf_path='${scriptDir}/../xlib/perf/linux-5.5.9/tools/perf/perf'
DYNINST_ROOT='{scriptDir}/../xlib/lib/dyninst-12.0.1'
DYNINST_LIB='${DYNINST_ROOT}/lib'
export DYNINSTAPI_RT_LIB=${DYNINST_LIB}/libdyninstAPI_RT.so




opt_outDir=''
opt_trace_dir=''
opt_inst_dir=''
instrumentor_path='../bin-anlys/install/bin/miami'
opt_loads='1'
opt_stores='0'
opt_strided='1'
opt_indirect='1'
opt_frame='0'
opt_analysis_file=''
hpcstuct="/home/kili337/tools/hpctoolkit_linemap/bin/hpcstruct"


#****************************************************************************
# Parse arguments
#****************************************************************************

die()
{
    cat <<EOF 1>&2
${scriptCmd}: $*
Use '${scriptCmd} -h' for usage.
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage: ${scriptCmd} [options] [--] <app> [app-args]
EOF
    exit 0
}

#-----------------------------------------------------------
# optional arguments
#-----------------------------------------------------------
while [[ $# -gt 0 ]] ; do

    arg="$1"
    shift # past argument

    case "${arg}" in
        -h | --help )
            usage
            ;;

        -o | --output )
            opt_outDir="$1"
            shift # past value
            ;;
        
	-t | --trace-dir )
            opt_trace_dir="$1"
            shift # past value
            ;;

	-s | --inst-dir )
            opt_inst_dir="$1"
            shift # past value
            ;;

	-- )
            break
            ;;

        * ) # beginning of <application> command line
            set -- "$arg" "$@"
            break
            ;;
    esac
done

#-----------------------------------------------------------
# required args
#-----------------------------------------------------------
#if [[ -z $1 ]] ; then
#    die "no command to monitor"
#fi
trace=''
binanlys=''
hpcstruct=''
mode=''
period=''
callpath=''


while IFS=' ' read -r type value; do
    echo "type: $type value: $value"
    if [[ $type == "-m" ]]
    then 
      mode=$value
    elif [[ $type == "-p" ]]
    then 
      period=$value
    elif [[ $type == "-t" ]]
    then 
      trace=$value
    elif [[ $type == "-b" ]]
    then 
      binanlys=$value
    elif [[ $type == "-h" ]]
    then 
      hpcstruct=$value
    elif [[ $type == "-c" ]]
    then 
      callpath=$value
    fi
done < ${opt_trace_dir}/memgaze.config 


../mem-anlys/memgaze-analyze -t $trace -l $binanlys -s $hpcstruct -o $output -m $mode -p $period -c $callpath
























