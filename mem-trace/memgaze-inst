#!/bin/bash

scriptPath0="${BASH_SOURCE[0]}" # works when script is sourced (unlike $0)
scriptPath=$(readlink -f "${scriptPath0}")
scriptCmd=${scriptPath##*/} # cf. $(basename ...)
scriptDir=${scriptPath%/*}  # cf. $(dirname ...)

perf_path="${scriptDir}/../xlib/perf/linux-5.5.9/tools/perf/perf"
DYNINST_ROOT="{scriptDir}/../xlib/lib/dyninst-12.0.1"
DYNINST_LIB="${DYNINST_ROOT}/lib"
export DYNINSTAPI_RT_LIB=${DYNINST_LIB}/libdyninstAPI_RT.so
hpcstuct="${scriptDir}/../xlib/lib/hpctoolkit-2022.01.15/bin/hpcstruct"


set -x
opt_outDir=''
opt_app=''
instrumentor_path="${scriptDir}/../bin-anlys/install/bin/miami"
opt_loads='1'
opt_stores='0'
opt_strided='1'
opt_indirect='1'
opt_frame='0'
opt_analysis_file=''

#****************************************************************************
# Parse arguments
#****************************************************************************

die()
{
    cat <<EOF 1>&2
${scriptCmd}: $*
Use '${scriptCmd} -h' for usage.
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage: ${scriptCmd} [options] 

Options:
  -h / --help   => prints help
  -o / --output => output directory path
  -i / --app    => input binary (required)
  -l / --loads  => load analysis (1 to do 0 to skip def:1)
  -s / --stores => store analysis (1 to do 0 to skip def:0)
  -t / --strided => strided analysis (req -l and/or -s to set 1) (1 to do 0 to skip def:1)
  -n / --indirect => indirect analysis (req -l and/or -s to set 1) (1 to do 0 to skip def:1)
  -f / --frame  => frame analysis (req -l and/or -s to set 1) (1 to do 0 to skip def:0)

EOF
    exit 0
}

#-----------------------------------------------------------
# optional arguments
#-----------------------------------------------------------
while [[ $# -gt 0 ]] ; do

    arg="$1"
    shift # past argument

    case "${arg}" in
        -h | --help )
            usage
            ;;

        -o | --output )
            opt_outDir="$1"
            shift # past value
            ;;
        
	-i | --app )
            opt_app="$1"
            shift # past value
            ;;

        -l | --loads )
            opt_loads="$1"
            shift # past value
            ;;

        -s | --stores )
            opt_stores="$1"
            shift # past value
            ;;

        -t | --strided )
            opt_strided="$1"
            shift # past value
            ;;

        -n | --indirect )
            opt_indirect="$1"
            shift # past value
            ;;

        -f | --frame )
            opt_frame="$1"
            shift # past value
            ;;

	-- )
            break
            ;;

        * ) # beginning of <application> command line
            set -- "$arg" "$@"
            break
            ;;
    esac
done

# required args
#-----------------------------------------------------------
if [[ -z ${opt_app} ]] ; then
    die "no binary to instrument"
fi

if [ -z ${opt_outDir} ]
then
  opt_outDir="memgaze-${opt_app}"
fi

mkdir ${opt_outDir}
cp ${opt_app} ${opt_outDir}

${instrumentor_path}   --bin_path ${opt_outDir}/${opt_app}  --load_class 1 --inst_loads=${opt_loads} --inst_stores=${opt_stores} --inst_strided=${opt_strided} --inst_indirect=${opt_indirect} --inst_frame=${opt_frame} --lcFile=${opt_outDir}/${opt_app}_PTW.binanlys &> ${opt_outDir}/${opt_app}_PTW.binanlys.log 

${scriptDir}/memgaze-inst-cat ${opt_outDir}/${opt_app}_PTW.binanlys.log ${opt_outDir}/${opt_app}_PTW.binanlys
cd ${opt_outDir}
${hpcstuct} ${opt_app}_PTW
cd ..
mv ${opt_outDir}/${opt_app}_PTW.binanlys_Fixed ${opt_outDir}/${opt_app}_PTW.binanlys 
