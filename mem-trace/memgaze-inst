#!/bin/bash
# -*- mode: sh -*-

#*BeginPNNLCopyright*********************************************************
#
# $HeadURL$
# $Id: 0cae9f95d9ed0841bbf77c91eef5f3d4c9a73f2e $
#
#***********************************************************EndPNNLCopyright*

# set -x

scriptPath0="${BASH_SOURCE[0]}" # works when script is sourced (unlike $0)
scriptPath=$(readlink -f "${scriptPath0}")
scriptCmd=${scriptPath##*/} # cf. $(basename ...)
scriptDir=${scriptPath%/*}  # cf. $(dirname ...)

#****************************************************************************

MG_XLIB_ROOT="${MG_XLIB_ROOT:-${scriptDir}/../../xlib/lib}"
MG_PERF_ROOT="${MG_PERF_ROOT:-${scriptDir}/../../xlib/perf}"

#-----------------------------------------------------------

mg_inst="${scriptDir}/../libexec/bin/memgaze-instrumentor"

mg_inst_cat="${scriptDir}/../libexec/memgaze-inst-cat"


#DYNINST_ROOT="${MG_XLIB_ROOT}/dyninst-12.0.1"
DYNINST_ROOT="${MG_XLIB_ROOT}/dyninst-12.1.0"
DYNINST_LIB="${DYNINST_ROOT}/lib"
export DYNINSTAPI_RT_LIB="${DYNINST_LIB}/libdyninstAPI_RT.so"

#-----------------------------------------------------------

hpcstruct=""

hpcstruct1=hpctoolkit-2022.05.15/bin/hpcstruct
hpcstruct2=hpctoolkit-develop/bin/hpcstruct

if [[ -z ${hpcstruct} && -x ${MG_XLIB_ROOT}/${hpcstruct1} ]] ; then
    hpcstruct="${MG_XLIB_ROOT}/${hpcstruct1}"
elif [[ -z ${hpcstruct} && -x ${MG_XLIB_ROOT}/${hpcstruct2} ]] ; then
    hpcstruct="${MG_XLIB_ROOT}/${hpcstruct2}"
else
    die "Found too many HPCToolkit installations!"
fi

#-----------------------------------------------------------

echo ${DYNINSTAPI_RT_LIB}
echo ${hpcstruct}

#****************************************************************************

opt_outDir=''
opt_loads='1'
opt_stores='0'
opt_strided='1'
opt_indirect='1'
opt_frame='0'
opt_analysis_file=''
opt_instBin_name=''

opt_app=''

#****************************************************************************
# Parse arguments
#****************************************************************************

die()
{
    cat <<EOF 1>&2
${scriptCmd}: $*
Use '${scriptCmd} -h' for usage.
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage: ${scriptCmd} [options] <app>

Instrument application binary <app> and place results in <inst-dir>.

Options (defaults in []):
  -h / --help          help

  -o / --output <path> output directory <inst-dir>
  -b / --outapp <name> instrumented binary name [<bin>-memgaze]

  -l / --loads         instrument loads (1 or 0) [1]
  -s / --stores        instrument stores (1 or 0) [0]
  -t / --strided       instrument strided accesses (1 or  0) [1]
  -n / --indirect      instrument indirect accesses (1 or 0 [1]
  -f / --frame         instrument frame accesses (1 or 0) [0]
EOF
    exit 0
}


#-----------------------------------------------------------
# optional arguments
#-----------------------------------------------------------

while [[ $# -gt 0 ]] ; do

    arg="$1"
    shift # past argument

    case "${arg}" in
        -h | --help )
            usage
            ;;

        -o | --output )
            opt_outDir="$1"
            shift # past value
            ;;

        # FIXME: to deprecate
        -i | --app )
            opt_app="$1"
            shift # past value
            ;;

        -b | --outapp )
            opt_instBin_name="$1"
            shift # past value
            ;;

        -l | --loads )
            opt_loads="$1"
            shift # past value
            ;;

        -s | --stores )
            opt_stores="$1"
            shift # past value
            ;;

        -t | --strided )
            opt_strided="$1"
            shift # past value
            ;;

        -n | --indirect )
            opt_indirect="$1"
            shift # past value
            ;;

        -f | --frame )
            opt_frame="$1"
            shift # past value
            ;;

        -- ) # next token contains "<app>..."
            ;;

        * ) # $arg is "<app>" (and options could follow)
            opt_app=${arg}
            ;;
    esac
done

#-----------------------------------------------------------
# required args
#-----------------------------------------------------------

if [[ -z ${opt_app} ]] ; then
    die "no binary to instrument"
fi

app=${opt_app}
IFS='/'
read -a strarr <<< "${opt_app}"
app=${strarr[-1]}
IFS=''


if [[ -z ${opt_outDir} ]] ; then
    opt_outDir="memgaze-${app}"
fi


if [[ -z ${opt_instBin_name} ]] ; then
    opt_instBin_name="${app}-memgaze"
fi

#****************************************************************************
# 
#****************************************************************************

mkdir ${opt_outDir}

cp ${opt_app} ${opt_outDir}

${mg_inst} --bin_path ${opt_outDir}/${app}  --load_class 1 \
           --inst_loads=${opt_loads} \
           --inst_stores=${opt_stores} \
           --inst_strided=${opt_strided} \
           --inst_indirect=${opt_indirect} \
           --inst_frame=${opt_frame} \
           --lcFile=${opt_outDir}/${opt_instBin_name}.binanlys \
           --outBinName=${opt_outDir}/${opt_instBin_name} \
    &> ${opt_outDir}/${opt_instBin_name}.binanlys.log

${mg_inst_cat} ${opt_outDir}/${opt_instBin_name}.binanlys.log ${opt_outDir}/${opt_instBin_name}.binanlys ${opt_outDir}/${opt_instBin_name}

${hpcstruct} ${opt_outDir}/${opt_instBin_name} -o ${opt_outDir}/${opt_instBin_name}.hpcstruct

mv ${opt_outDir}/${opt_instBin_name}.binanlys_Fixed ${opt_outDir}/${opt_instBin_name}.binanlys
