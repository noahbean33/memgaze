#!/bin/bash
set -x

scriptPath0="${BASH_SOURCE[0]}" # works when script is sourced (unlike $0)
scriptPath=$(readlink -f "${scriptPath0}")
scriptCmd=${scriptPath##*/} # cf. $(basename ...)
scriptDir=${scriptPath%/*}  # cf. $(dirname ...)

MG_XLIB_ROOT="${MG_XLIB_ROOT:-${scriptDir}/../xlib/lib}"
MG_PERF_ROOT="${MG_PERF_ROOT:-${scriptDir}/../xlib/perf}"

perf_path="${MG_PERF_ROOT}/linux-5.5.9/tools/perf/perf"
DYNINST_ROOT="${MG_XLIB_ROOT}/dyninst-12.0.1"
DYNINST_LIB="${DYNINST_ROOT}/lib"

export DYNINSTAPI_RT_LIB=${DYNINST_LIB}/libdyninstAPI_RT.so


opt_outDir=''
opt_app=''
#perf_path='/home/kili337/src/linux-5.5.9/tools/perf/perf'
#scriptCmd="./memgaze-xtrace"
SCRIPT="${scriptDir}/perf-script-intel-pt.py"


#****************************************************************************
# Parse arguments
#****************************************************************************

die()
{
    cat <<EOF 1>&2
${scriptCmd}: $*
Use '${scriptCmd} -h' for usage.
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage: ${scriptCmd} [options]

Options:
  -h / --help   => print help
  -o / --output => name of output directory
  -i / --input  => directory for perf data
EOF
    exit 0
}

#-----------------------------------------------------------
# optional arguments
#-----------------------------------------------------------
while [[ $# -gt 0 ]] ; do

    arg="$1"
    shift # past argument

    case "${arg}" in
        -h | --help )
            usage
            ;;

        -o | --output )
            opt_outDir="$1"
            shift # past value
            ;;
        
	-i | --input )
            opt_app="$1"
            shift # past value
            ;;

	-- )
            break
            ;;

        * ) # beginning of <application> command line
            set -- "$arg" "$@"
            break
            ;;
    esac
done

#-----------------------------------------------------------
# required args
#-----------------------------------------------------------
#if [[ -z $1 ]] ; then
#    die "no command to monitor"
#fi

if [ -z ${opt_outDir} ]
then
  opt_outDir=${opt_app}
fi

while IFS= read -r line; do
    echo "Text read from file: $line"
    words=($line)
    echo "option: ${words[0]} var: ${words[1]}"
    if [[ ${words[0]} == '-b' ]] ; then
      app_path=${words[1]}
    fi
    if [[ ${words[0]} == '-data' ]] ; then
      dataFile=${words[1]}
    fi
    if [[ ${words[0]} == '-m' ]] ; then
      if [[ ${words[1]} == 'ldlat' ]]; then
        SCRIPT="${scriptDir}/perf-script-intel-ldlat.py"
      fi
    fi
done < ${opt_app}/memgaze.config

IFS='/' read -a apps <<< $app_path
app=${apps[-1]}
echo "app: $app"





${perf_path} script --script=${SCRIPT} -i ${opt_app}/${dataFile} > ${opt_outDir}/${app}.trace
cat ${opt_outDir}/${app}.trace | grep -v error &> ${opt_outDir}/${app}.trace.clean
mv ${opt_outDir}/${app}.trace.clean ${opt_outDir}/${app}.trace
${scriptDir}/memgaze-xtrace-normalize ${opt_outDir}/${app}.trace ${app_path} ${app_path}.binanlys ${opt_outDir}/${app}.trace.final
mv ${opt_outDir}/${app}.trace.final ${opt_outDir}/${app}.trace
mv ${opt_outDir}/${app}.trace.final_callGraph ${opt_outDir}/${app}.callpath
